 package com.github.dapeng.scheduler.events.serializer;
        

        import com.github.dapeng.core.*;
        import com.github.dapeng.org.apache.thrift.*;
        import com.github.dapeng.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (2.1.2-SNAPSHOT)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *
        **/
        public class TaskEventSerializer implements BeanSerializer<com.github.dapeng.scheduler.events.TaskEvent>{
        
      @Override
      public com.github.dapeng.scheduler.events.TaskEvent read(TProtocol iprot) throws TException{

      com.github.dapeng.scheduler.events.TaskEvent bean = new com.github.dapeng.scheduler.events.TaskEvent();
      com.github.dapeng.org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.I64){
              long elem0 = iprot.readI64();
       bean.setId(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setServiceName(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setMethodName(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setVersion(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.I64){
              long elem0 = iprot.readI64();
       bean.setCostTime(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.I32){
              com.today.api.scheduler.enums.TaskStatusEnum elem0 = com.today.api.scheduler.enums.TaskStatusEnum.findByValue(iprot.readI32());
       bean.setTaskStatus(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 7:
              if(schemeField.type == com.github.dapeng.org.apache.thrift.protocol.TType.STRING){
              String elem0 = iprot.readString();
       bean.setRemark(elem0);
            }else{
              com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.github.dapeng.scheduler.events.TaskEvent bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("TaskEvent"));

      
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("id", com.github.dapeng.org.apache.thrift.protocol.TType.I64, (short) 1));
            Long elem0 = bean.getId();
            oprot.writeI64(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("serviceName", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, (short) 2));
            String elem1 = bean.getServiceName();
            oprot.writeString(elem1);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("methodName", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, (short) 3));
            String elem2 = bean.getMethodName();
            oprot.writeString(elem2);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("version", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, (short) 4));
            String elem3 = bean.getVersion();
            oprot.writeString(elem3);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("costTime", com.github.dapeng.org.apache.thrift.protocol.TType.I64, (short) 5));
            Long elem4 = bean.getCostTime();
            oprot.writeI64(elem4);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("taskStatus", com.github.dapeng.org.apache.thrift.protocol.TType.I32, (short) 6));
            com.today.api.scheduler.enums.TaskStatusEnum elem5 = bean.getTaskStatus();
            oprot.writeI32(elem5.getValue());
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("remark", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, (short) 7));
            String elem6 = bean.getRemark();
            oprot.writeString(elem6);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.github.dapeng.scheduler.events.TaskEvent bean) throws TException{
      
              if(bean.getServiceName() == null)
              throw new SoaException(SoaCode.StructFieldNull, "serviceName字段不允许为空");
            
              if(bean.getMethodName() == null)
              throw new SoaException(SoaCode.StructFieldNull, "methodName字段不允许为空");
            
              if(bean.getVersion() == null)
              throw new SoaException(SoaCode.StructFieldNull, "version字段不允许为空");
            
              if(bean.getTaskStatus() == null)
              throw new SoaException(SoaCode.StructFieldNull, "taskStatus字段不允许为空");
            
              if(bean.getRemark() == null)
              throw new SoaException(SoaCode.StructFieldNull, "remark字段不允许为空");
            
    }
    
        @Override
        public String toString(com.github.dapeng.scheduler.events.TaskEvent bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      