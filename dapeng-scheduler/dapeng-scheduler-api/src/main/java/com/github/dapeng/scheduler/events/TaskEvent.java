package com.github.dapeng.scheduler.events;

        import java.util.Optional;
        import com.github.dapeng.org.apache.thrift.TException;
        import com.github.dapeng.org.apache.thrift.protocol.TCompactProtocol;
        import com.github.dapeng.util.TCommonTransport;

        /**
         * Autogenerated by Dapeng-Code-Generator (2.1.2-SNAPSHOT)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

        *

 定时任务event

        **/
        public class TaskEvent{
        
            /**
            *

 事件Id

            **/
            public long id ;
            public long getId(){ return this.id; }
            public void setId(long id){ this.id = id; }

            public long id(){ return this.id; }
            public TaskEvent id(long id){ this.id = id; return this; }
          
            /**
            *

 服务名

            **/
            public String serviceName ;
            public String getServiceName(){ return this.serviceName; }
            public void setServiceName(String serviceName){ this.serviceName = serviceName; }

            public String serviceName(){ return this.serviceName; }
            public TaskEvent serviceName(String serviceName){ this.serviceName = serviceName; return this; }
          
            /**
            *

 方法名

            **/
            public String methodName ;
            public String getMethodName(){ return this.methodName; }
            public void setMethodName(String methodName){ this.methodName = methodName; }

            public String methodName(){ return this.methodName; }
            public TaskEvent methodName(String methodName){ this.methodName = methodName; return this; }
          
            /**
            *

 版本号

            **/
            public String version ;
            public String getVersion(){ return this.version; }
            public void setVersion(String version){ this.version = version; }

            public String version(){ return this.version; }
            public TaskEvent version(String version){ this.version = version; return this; }
          
            /**
            *

 耗时

            **/
            public long costTime ;
            public long getCostTime(){ return this.costTime; }
            public void setCostTime(long costTime){ this.costTime = costTime; }

            public long costTime(){ return this.costTime; }
            public TaskEvent costTime(long costTime){ this.costTime = costTime; return this; }
          
            /**
            *

 SUCCEED = 1:执行成功 ;FAIL = 2:执行失败

            **/
            public com.today.api.scheduler.enums.TaskStatusEnum taskStatus ;
            public com.today.api.scheduler.enums.TaskStatusEnum getTaskStatus(){ return this.taskStatus; }
            public void setTaskStatus(com.today.api.scheduler.enums.TaskStatusEnum taskStatus){ this.taskStatus = taskStatus; }

            public com.today.api.scheduler.enums.TaskStatusEnum taskStatus(){ return this.taskStatus; }
            public TaskEvent taskStatus(com.today.api.scheduler.enums.TaskStatusEnum taskStatus){ this.taskStatus = taskStatus; return this; }
          
            /**
            *

 备注

            **/
            public String remark ;
            public String getRemark(){ return this.remark; }
            public void setRemark(String remark){ this.remark = remark; }

            public String remark(){ return this.remark; }
            public TaskEvent remark(String remark){ this.remark = remark; return this; }
          

        public static byte[] getBytesFromBean(TaskEvent bean) throws TException {
          byte[] bytes = new byte[]{};
          TCommonTransport transport = new TCommonTransport(bytes, TCommonTransport.Type.Write);
          TCompactProtocol protocol = new TCompactProtocol(transport);

          new com.github.dapeng.scheduler.events.serializer.TaskEventSerializer().write(bean, protocol);
          transport.flush();
          return transport.getByteBuf();
        }

        public static TaskEvent getBeanFromBytes(byte[] bytes) throws TException {
          TCommonTransport transport = new TCommonTransport(bytes, TCommonTransport.Type.Read);
          TCompactProtocol protocol = new TCompactProtocol(transport);
          return new com.github.dapeng.scheduler.events.serializer.TaskEventSerializer().read(protocol);
        }

        public String toString(){
          StringBuilder stringBuilder = new StringBuilder("{");
            stringBuilder.append("\"").append("id").append("\":").append(this.id).append(",");
    stringBuilder.append("\"").append("serviceName").append("\":\"").append(this.serviceName).append("\",");
    stringBuilder.append("\"").append("methodName").append("\":\"").append(this.methodName).append("\",");
    stringBuilder.append("\"").append("version").append("\":\"").append(this.version).append("\",");
    stringBuilder.append("\"").append("costTime").append("\":").append(this.costTime).append(",");
    stringBuilder.append("\"").append("taskStatus").append("\":").append(this.taskStatus).append(",");
    stringBuilder.append("\"").append("remark").append("\":\"").append(this.remark).append("\",");
    
            stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
            stringBuilder.append("}");

          return stringBuilder.toString();
        }
      }
      