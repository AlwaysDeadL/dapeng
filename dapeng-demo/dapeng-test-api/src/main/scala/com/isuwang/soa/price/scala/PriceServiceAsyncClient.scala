package com.isuwang.soa.price.scala

        import com.github.dapeng.core._;
        import com.github.dapeng.org.apache.thrift._;
        import java.util.ServiceLoader;
        import java.util.concurrent.CompletableFuture;
        import com.isuwang.soa.price.scala.PriceServiceAsyncCodec._;
        import com.isuwang.soa.price.scala.service.PriceServiceAsync;
        import scala.concurrent.duration._
        import scala.concurrent.{Future, Promise}
        import scala.concurrent.ExecutionContext.Implicits.global

        /**
         * Autogenerated by Dapeng-Code-Generator (2.1.1-SNAPSHOT)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated

        **/
        class PriceServiceAsyncClient extends PriceServiceAsync {

        val serviceName = "com.isuwang.soa.price.service.PriceService"
        val version = "1.0.0"
        val pool = {
          val serviceLoader = ServiceLoader.load(classOf[SoaConnectionPoolFactory])
          if (serviceLoader.iterator().hasNext) {
            val poolImpl = serviceLoader.iterator().next().getPool
            poolImpl.registerClientInfo(serviceName,version)
            poolImpl
          } else null
        }

        def getServiceMetadata: String = {
          pool.send(
          serviceName,
          version,
          "getServiceMetadata",
          new getServiceMetadata_args,
          new GetServiceMetadata_argsSerializer,
          new GetServiceMetadata_resultSerializer
          ).success
        }

        /**
        *  java CompletableFuture => scala Future common function
        */
        def toScala[T,R](response: CompletableFuture[T])(extractor: T => R): Future[R] = {

          val promise = Promise[R]()
          response.whenComplete((res: T, ex) => {
            if (ex != null) promise.failure(ex)
            else promise.success(extractor(res))
          })
          promise.future
        }


        

            /**
            * 
            **/
            def insertPrice(price:com.isuwang.soa.price.scala.domain.Price ) : Future[Unit] = {

            val response = pool.sendAsync(
            serviceName,
            version,
            "insertPrice",
            insertPrice_args(price),
            new InsertPrice_argsSerializer(),
            new InsertPrice_resultSerializer() ).asInstanceOf[CompletableFuture[insertPrice_result]]

            toScala(response)(null)

          }

          

            /**
            * 
            **/
            def getPrices() : Future[List[com.isuwang.soa.price.scala.domain.Price]] = {

            val response = pool.sendAsync(
            serviceName,
            version,
            "getPrices",
            getPrices_args(),
            new GetPrices_argsSerializer(),
            new GetPrices_resultSerializer() ).asInstanceOf[CompletableFuture[getPrices_result]]

            toScala(response)(_.success)

          }

          
      }
      