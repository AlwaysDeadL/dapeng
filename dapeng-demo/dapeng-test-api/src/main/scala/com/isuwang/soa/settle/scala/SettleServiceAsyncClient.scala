package com.isuwang.soa.settle.scala

        import com.github.dapeng.core._;
        import com.github.dapeng.org.apache.thrift._;
        import java.util.ServiceLoader;
        import java.util.concurrent.CompletableFuture;
        import com.isuwang.soa.settle.scala.SettleServiceAsyncCodec._;
        import com.isuwang.soa.settle.scala.service.SettleServiceAsync;
        import scala.concurrent.duration._
        import scala.concurrent.{Future, Promise}
        import scala.concurrent.ExecutionContext.Implicits.global

        /**
         * Autogenerated by Dapeng-Code-Generator (2.1.1-SNAPSHOT)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated

        **/
        class SettleServiceAsyncClient extends SettleServiceAsync {

        val serviceName = "com.isuwang.soa.settle.service.SettleService"
        val version = "1.0.0"
        val pool = {
          val serviceLoader = ServiceLoader.load(classOf[SoaConnectionPoolFactory])
          if (serviceLoader.iterator().hasNext) {
            val poolImpl = serviceLoader.iterator().next().getPool
            poolImpl.registerClientInfo(serviceName,version)
            poolImpl
          } else null
        }

        def getServiceMetadata: String = {
          pool.send(
          serviceName,
          version,
          "getServiceMetadata",
          new getServiceMetadata_args,
          new GetServiceMetadata_argsSerializer,
          new GetServiceMetadata_resultSerializer
          ).success
        }

        /**
        *  java CompletableFuture => scala Future common function
        */
        def toScala[T,R](response: CompletableFuture[T])(extractor: T => R): Future[R] = {

          val promise = Promise[R]()
          response.whenComplete((res: T, ex) => {
            if (ex != null) promise.failure(ex)
            else promise.success(extractor(res))
          })
          promise.future
        }


        

            /**
            * 
            **/
            def createSettle(settle:com.isuwang.soa.settle.scala.domain.Settle ) : Future[Unit] = {

            val response = pool.sendAsync(
            serviceName,
            version,
            "createSettle",
            createSettle_args(settle),
            new CreateSettle_argsSerializer(),
            new CreateSettle_resultSerializer() ).asInstanceOf[CompletableFuture[createSettle_result]]

            toScala(response)(null)

          }

          

            /**
            * 
            **/
            def getSettleById(settleId:Int ) : Future[com.isuwang.soa.settle.scala.domain.Settle] = {

            val response = pool.sendAsync(
            serviceName,
            version,
            "getSettleById",
            getSettleById_args(settleId),
            new GetSettleById_argsSerializer(),
            new GetSettleById_resultSerializer() ).asInstanceOf[CompletableFuture[getSettleById_result]]

            toScala(response)(_.success)

          }

          
      }
      