package com.github.dapeng.impl.plugins.deploy_agent;

import org.apache.ivy.Ivy;

import javax.management.JMX;
import javax.management.MBeanServerConnection;
import javax.management.ObjectName;
import javax.management.remote.JMXConnector;
import javax.management.remote.JMXConnectorFactory;
import javax.management.remote.JMXServiceURL;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLDecoder;
import java.text.ParseException;
import java.util.*;

//import com.vip.osp.engine.classloader.OspAppClassLoader;
//import com.vip.osp.engine.classloader.OspContainerClassLoader;
//import com.vip.osp.engine.classloader.OspPlatformClassLoader;
//import com.vip.osp.engine.utils.IvyGetJarUtil;

/**
 * OSP Engine的启动命令，使用特定的ClassLoader加载指定目录下的Class，启动OSP Container与Jetty.
 * 
 * @author jon.liang
 * @author xiaopeng.he
 */
public class OspEngine {

	private static final String JAR_POSTFIX = ".*\\.jar";

	private boolean useivy;
	private String ospVersion;
	private String services;
	private String ivysettings;
	private String cache;
	private String local;

	protected String servicesdir;
	protected String thirddir;
	protected int port = -1;
	protected int restport = -1;

	private static String action = "start";
	private static String jmxHost = "127.0.0.1";
	private static int jmxPort = 8060;
	private static String jmxObject = "com.vip.hermes.core.reporter:type=Slf4jReporter";

	private ClassLoader containerClassLoader;
	private ClassLoader appClassLoader;

	public interface ScheduledReporterMBean {
		String queryJmxQueryJson();
	}

	public void start(int port, int restport) throws Exception {
		this.port = port;
		this.restport = restport;
		this.containerClassLoader = ClassLoader.getSystemClassLoader();
		this.appClassLoader = ClassLoader.getSystemClassLoader();

		startContainerAndJetty();
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void printHermesInfo(String jmxQuery) throws Exception {
		Class<?> json = containerClassLoader.loadClass("com.alibaba.fastjson.JSON");
		Method parseObject = json.getMethod("parseObject", String.class, Class.class);
		Map map = (Map) parseObject.invoke(null, jmxQuery, Map.class);

		List<Map> modules = (List<Map>) map.get("moduleList");
		for (Map module : modules) {
			List<Map> dataList = (List<Map>) module.get("dataList");
			for (Map data : dataList) {
				String name = (String) data.get("name");
				Map tag = (Map) data.get("tag");
				Map content = (Map) data.get("content");
				System.out.println(name); // NOSONAR
				System.out.println("    content:     [" + content + "]"); // NOSONAR
				System.out.println("    tag:    [" + tag + "] "); // NOSONAR
				System.out.println(); // NOSONAR
			}
		}
	}

	public void showStatus() throws Exception {
		JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://" + jmxHost + ':' + jmxPort + "/jmxrmi");
		JMXConnector jmxc = JMXConnectorFactory.connect(url, null);
		MBeanServerConnection mbsc = jmxc.getMBeanServerConnection();

		Set<ObjectName> beanSet = mbsc.queryNames(null, null);
		for (ObjectName bean : beanSet) {
			if (bean.toString().contains(jmxObject)) {
				ScheduledReporterMBean mxbeanProxy = JMX.newMBeanProxy(mbsc, bean, ScheduledReporterMBean.class);
				String jmxQuery = mxbeanProxy.queryJmxQueryJson();
				printHermesInfo(jmxQuery);
			}
		}
	}

	/**
	 * Start osp service by running OspEngine.
	 * <p>
	 * @param args <br>
	 * -useivy: Boolean, download service and osp jar by ivy. default value is false.<br>
	 * -services: String, pattern is groupId:artifactId:version, the service will be downloaded by ivy.<br>
	 * -servicesdir: String, pattern is dir1;dir2;dir3, if -services is not seted, service jar, class, etc in
	 * servicesdir will be loaded.<br>
	 * -thirddir: String, pattern is dir1;dir2;dir3, the third jar in thirddir will be loaded.<br>
	 * -cache: String, the directory of ivy cache. default directory is ~/.ivy_cache.<br>
	 * -ivysettings: String, the file path of ivysettings.xml. there is a default file in OspEngine.<br>
	 * -local: String, the directory of maven repository. default directory is ~/.m2/repository.<br>
	 * -port: Integer, the port of osp container, default port is -1, the port will be generated by OspContainer.<br>
	 * -restport: Integer, if use osp rest, the jetty will be started. default restport is -1, jetty will not started.
	 * <br>
	 * --help: print some helpful information.<br>
	 */
	public static void main(String[] args) throws Exception {

		try {

			OspEngine engine = new OspEngine();

			engine.parseArgs(args);

			if ("info".equalsIgnoreCase(action)) {
				engine.loadLibrary();
				engine.showStatus();
				System.exit(0);
				return;
			}
			engine.loadLibrary();

//			engine.startContainerAndJetty();
		} catch (Exception e) { // NOSONAR
			e.printStackTrace(); // NOSONAR
			System.exit(-1); // NOSONAR
		}
	}

	/**
	 * 解析命令行参数
	 */
	protected void parseArgs(String[] args) throws MalformedURLException {

		if (args == null) {
			return;
		}

		int argsLength = args.length;

		for (int i = 0; i < args.length; i += 2) {

			if ("-useivy".equals(args[i])) {
				if (i + 1 >= args.length) {
					fail("-useivy miss value.");
				}
				if (args[i + 1].toLowerCase().matches("true|false")) {
					useivy = Boolean.parseBoolean(args[i + 1]);
				} else {
					fail("-useivy type should be bool.");
				}
			} else if ("-version".equals(args[i])) {
				if (i + 1 >= args.length) {
					fail("-version miss value.");
				}
				ospVersion = args[i + 1];
			} else if ("-services".equals(args[i])) {
				if (i + 1 >= args.length) {
					fail("-services miss value.");
				}
				services = args[i + 1];
			} else if ("-cache".equals(args[i])) {
				if (i + 1 >= args.length) {
					fail("-cache miss value.");
				}
				cache = args[i + 1];
			} else if ("-ivysettings".equals(args[i])) {
				if (i + 1 >= args.length) {
					fail("-ivysettings miss value.");
				}
				ivysettings = args[i + 1];
			} else if ("-local".equals(args[i])) {
				if (i + 1 >= args.length) {
					fail("-local miss value.");
				}
				local = args[i + 1];
			} else if ("-servicesdir".equals(args[i])) {
				checkHasValue(argsLength, i, "-servicesdir");
				servicesdir = args[i + 1];
			} else if ("-thirddir".equals(args[i])) {
				checkHasValue(argsLength, i, "-thirddir");
				thirddir = args[i + 1];
			} else if ("-port".equals(args[i])) {
				checkHasValue(argsLength, i, "-port");

				if (args[i + 1].matches("(-1)|([0-9]*)")) {
					port = Integer.parseInt(args[i + 1]);
				} else {
					fail("-port should be positive integer");
				}
			} else if ("-restport".equals(args[i])) {
				checkHasValue(argsLength, i, "-restport");

				if (args[i + 1].matches("(-1)|[0-9]*")) {
					restport = Integer.parseInt(args[i + 1]);
				} else {
					fail("-restport should be positive integer");
				}
			} else if ("--help".equals(args[i])) {
				fail(null);
			} else if ("-jmxPort".equals(args[i])) {
				if (args[i + 1].matches("[0-9]*")) {
					jmxPort = Integer.parseInt(args[i + 1]);
				} else {
					fail("Jmx Port must be a int.");
					break;
				}
			} else if ("-action".equals(args[i])) {
				action = args[i + 1];
			} else if ("-jmxHost".equals(args[i])) {
				jmxHost = args[i + 1];
			} else if ("-jmxObject".equals(args[i])) {
				jmxObject = args[i + 1];
			} else {
				System.out.println("[warn][the parameter(" + args[i] + ") is not supported now.]"); // NOSONAR
			}
		}
	}

	private void checkHasValue(int argsLength, int i, String argName) {
		if (i + 1 >= argsLength) {
			fail(argName + " miss value.");
		}
	}

	/**
	 * 打印失败信息并退出系统.
	 */
	private void fail(String message) {

		System.out.println();// NOSONAR

		if (message != null) {
			System.out.println("Error: " + message); // NOSONAR
			System.out.println();// NOSONAR
		}

		System.out.println("Usage: java -jar jarfile [options] [args...]"); // NOSONAR
		System.out.println();// NOSONAR
		System.out.println("The options include:");// NOSONAR
		System.out.println("\t" + "--help: some helpful informations.");// NOSONAR
		System.out // NOSONAR
				.println("\t"
						+ "-servicesdir: String, pattern is dir1;dir2;dir3, if -services is not seted, service jar, class, etc in servicesdir will be loaded.");
		System.out.println("\t" // NOSONAR
				+ "-thirddir: String, pattern is dir1;dir2;dir3, the third jar in thirddir will be loaded.");
		System.out // NOSONAR
				.println("\t"
						+ "-port: Integer, the port of osp container, default port is -1, the port will be generated by OspContainer.");
		System.out // NOSONAR
				.println("\t"
						+ "-restport: Integer, if use osp rest, the jetty will be started. default restport is -1, jetty will not started.");
		System.out.println();// NOSONAR
		System.exit(-1);// NOSONAR
	}

	/**
	 * 初始化OSP三种Classloader的ClassPath
	 */
	private void loadLibrary() throws Exception {
		Set<URI> plateformUrls = new HashSet<URI>();
		Set<URI> containerUrls = new HashSet<URI>();
		Set<URI> serviceUrls = new HashSet<URI>();

		String organisation = "com.github.dapeng";

		if (useivy) {
 			IvyGetJarUtil ivyGetJarUtil = new IvyGetJarUtil(getIvy());
			plateformUrls.addAll(ivyGetJarUtil.getJars(organisation, services, ospVersion,
					new String[] { "master(*)", "compile(*)", "runtime(*)", "provided(*)" }));
//			containerUrls.addAll(ivyGetJarUtil.getJars(organisation, "osp-container", ospVersion,
//					new String[] { "master(*)", "compile(*)", "runtime(*)" }));

			if (services != null) {
				String[] temp = services.split(":");
				serviceUrls.addAll(
						ivyGetJarUtil.getJars(organisation, temp[0], ospVersion, new String[] { "master(*)", "compile(*)" }));
			}
		} else {
			String enginePath = URLDecoder.decode(
					new File(OspEngine.class.getProtectionDomain().getCodeSource().getLocation().getFile()).getParent(),
					"UTF-8");

			File platformlib = new File(enginePath + "/platformlib");
			if (platformlib.exists()) {
				plateformUrls.addAll(listFilesUrls(platformlib, JAR_POSTFIX));
			} else {
				fail("platformlib folder is not exists");
			}

			File containerlib = new File(enginePath + "/containerlib");
			if (containerlib.exists()) {
				containerUrls.addAll(listFilesUrls(containerlib, JAR_POSTFIX));
			} else {
				fail("containerlib folder is not exists");
			}

			// 检查servicesdir非空时必须是存在的目录列表
			if (servicesdir != null) {
				for (String temp : servicesdir.split(";")) {
					File file = new File(temp);
					if (!file.exists()) {
						fail("the servicesdir is not exists, it's " + temp);
					}
					if (!file.isDirectory()) {
						fail("the servicesdir is not directory, it's " + temp);
					}
				}
			} else {
				servicesdir = enginePath + "/servicesdir";
			}

			String[] servicedirs = servicesdir.split(";");
			for (String dir : servicedirs) {
				File dirFile = new File(dir);
				serviceUrls.addAll(listFilesUrls(dirFile, JAR_POSTFIX));

				// 额外将此目录加为ClassPath, 因为使用Spring Loaded时，此目录直接放.class文件
				serviceUrls.add(dirFile.toURI());
			}

			// thirddir非空时必须是存在的目录或文件列表
			if (thirddir != null) {
				for (String temp : thirddir.split(";")) {
					File file = new File(temp);
					if (!file.exists()) {
						fail("the thirddir is not exists, it's " + temp);
					}
				}
			} else {
				thirddir = enginePath + "/thirddir";
			}

			String[] thirddirs = thirddir.split(";");
			for (String dir : thirddirs) {
				serviceUrls.addAll(listFilesUrls(new File(dir), JAR_POSTFIX));
			}
		}

//		OspPlatformClassLoader platformClassLoader = new OspPlatformClassLoader(toArray(plateformUrls));
//
//		containerClassLoader = new OspContainerClassLoader(toArray(containerUrls), platformClassLoader);
//
//		appClassLoader = new OspAppClassLoader(toArray(serviceUrls), platformClassLoader);
	}

	private Ivy getIvy() throws ParseException, IOException {
		Ivy ivy = Ivy.newInstance();

		if (cache == null) {
			cache = System.getProperty("user.home") + "/.ivy_cache";
		}
		File cacheFile = new File(cache);
		if (!cacheFile.exists()) {
			cacheFile.mkdirs();
		}
		ivy.getSettings().setDefaultCache(cacheFile);

		if (local == null) {
			local = System.getProperty("user.home") + "/.m2/repository";
		}
		File localFile = new File(local);
		if (!localFile.exists()) {
			localFile.mkdirs();
		}
		ivy.getSettings().setVariable("ivy.local.default.root", local);

		URL ivysettingsURL = null;
		if (ivysettings == null) {
			ivysettingsURL = OspEngine.class.getClassLoader().getResource("ivysettings.xml");
		} else {
			ivysettingsURL = new File(ivysettings).toURI().toURL();
		}
		ivy.getSettings().load(ivysettingsURL);

		return ivy;
	}

	private static URL[] toArray(Set<URI> urls) throws MalformedURLException {
		List<URL> arrays = new ArrayList<URL>(urls.size());
		for (URI uri : urls) {
			arrays.add(uri.toURL());
		}
		return arrays.toArray(new URL[arrays.size()]);
	}

	/**
	 * list files in dir or file, filter by nameRegex.
	 */
	private static Set<URI> listFilesUrls(File file, String nameRegex) throws MalformedURLException {
		Set<URI> urlSet = new HashSet<URI>();

		if (file == null || !file.exists()) {
			return urlSet;
		}

		if (file.isFile() && file.getName().matches(nameRegex)) {
			urlSet.add(file.toURI());
		} else if (file.isDirectory()) {
			File[] files = file.listFiles();
			if (files != null) {
				for (int i = 0; i < files.length; i++) {
					urlSet.addAll(listFilesUrls(files[i], nameRegex));
				}
			}
		}

		return urlSet;
	}

	/**
	 * start OspContainer, start Jetty if necessary
	 */
	private void startContainerAndJetty() throws InterruptedException, ClassNotFoundException, InstantiationException,
			IllegalAccessException, NoSuchMethodException, InvocationTargetException {

		// 启动 OspContainer, 因为Netty会block住当前线程，所以使用新线程来启动
		Thread startContainerThread = new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					// 把当前线程的classloader设为containerClassLoader
					// 以解决ospEngine启动的时候，无法加载venus-log.properties的问题
					Thread.currentThread().setContextClassLoader(containerClassLoader);

					Class<?> loadClass = containerClassLoader.loadClass("com.vip.osp.container.StartContainer");
					Method startMethod = loadClass.getMethod("startUp", int.class, ClassLoader.class,
							ClassLoader.class);
					startMethod.invoke(loadClass, port, containerClassLoader, appClassLoader);
				} catch (Exception e) {
					throw new RuntimeException(e);
				}
			}
		});

		// Container会根据此变量为RestTool准备信息
		if (restport != -1) {
			System.setProperty("osp.container.restport", String.valueOf(restport));
		}

		startContainerThread.start();

		// 启动 jetty
		if (restport != -1) {
			waitContainerReady();
			Class<?> loadClass = containerClassLoader.loadClass("com.vip.osp.resttools.jetty.StartJetty");
			Object newInstance = loadClass.newInstance();
			Method method = loadClass.getMethod("start");
			method.invoke(newInstance);
		}

		startContainerThread.join();
	}

	/**
	 * 等待OSP将服务信息加入环境变量，代表OSP启动完毕
	 */
	private void waitContainerReady() throws InterruptedException {
		while (true) {
			Thread.sleep(500);
			if (System.getProperty("osp.container.services") != null
					&& "true".equals(System.getProperty("osp.container.started"))) {
				Thread.sleep(1000);
				break;
			}
		}
	}
}
